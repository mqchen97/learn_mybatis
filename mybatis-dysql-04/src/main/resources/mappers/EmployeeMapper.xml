<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="com.atguigu.mapper.EmployeeMapper">

    <!-- 查询使用 select insert update delete标签
            id = 方法名
            resultType = 返回值类型
            标签内编写SQL语句
     -->
    <select id="query" resultType="employee">
        select * from t_emp
        <where>
            <if test="name != null">
                emp_name = #{name}
            </if>
            <if test="salary != null">
                and emp_salary = #{salary}
            </if>
        </where>
    </select>

    <update id="update">
        update t_emp
        <!-- set emp_name=#{empName},emp_salary=#{empSalary} -->
        <!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 -->
        <set>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary != null">
                emp_salary=#{empSalary},
            </if>
        </set>
        where emp_id=#{empId}
        <!--
             第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?
             第二种情况：部分条件满足 SET emp_salary=?
             第三种情况：所有条件都不满足 update t_emp where emp_id=?
                没有set子句的update语句会导致SQL语法错误
         -->
    </update>

    <select id="queryBatch" resultType="employee">
        select * from t_emp where emp_id in
        <!--
        collection属性：要遍历的集合
        item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象
        separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符
        open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串
        close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串
        index属性：这里起一个名字，便于后面引用
            遍历List集合，这里能够得到List集合的索引值
            遍历Map集合，这里能够得到Map集合的key
        -->
        <foreach collection="ids"  open="(" close=")" separator="," item="id">
            <!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 -->
            (#{emp.empName},#{myIndex},#{emp.empSalary},#{emp.empGender})
        </foreach>
    </select>

    <delete id="deleteBatch">
        delete from t_emp where emp_id in
        <foreach collection="ids"  open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <insert id="insertBatch">
        insert into t_emp (emp_name, emp_salary) values
        <foreach collection="list" separator="," item="employee">
            (#{employee.empName}, #{employee.empSalary})
        </foreach>
    </insert>

    <update id="updateBatch">
        <foreach collection="list" item="emp">
            update t_emp set emp_name = #{emp.empName}, emp_salary = #{emp.empSalary}
            where emp_id = #{emp.empId};
        </foreach>
    </update>
</mapper>